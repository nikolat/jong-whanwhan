＃==========================================================
＃ LICENSE: CC0 1.0 Universal
＃ http://creativecommons.org/publicdomain/zero/1.0/
＃==========================================================

＃==========================================================
＃ 設定
＃==========================================================
＠TH.Version
POKER/1.0
＠TH.GhostName
雀-ホワンホワン
＃ゲーム開始
＊TH.talk.game_start
：（０）…。
＃各種アクション
＊TH.talk.action.bet
：（０）ベット（call,MJ.ExecAqtk,ベ'ット）
＊TH.talk.action.raise
：（８）レイズ（call,MJ.ExecAqtk,レ'イズ）
＊TH.talk.action.allin
：（７）オールイン（call,MJ.ExecAqtk,オールイ'ン）
＊TH.talk.action.check
：（６）チェック（call,MJ.ExecAqtk,チェ'ック）
＊TH.talk.action.call
：（５）コール（call,MJ.ExecAqtk,コ'ール）
＊TH.talk.action.fold
：（３）フォールド（call,MJ.ExecAqtk,フォ'ールド）
＃ラウンド勝利
＊TH.talk.round.winner
：（５）…。
＃ドロップアウト
＊TH.talk.round.dropout
：（４）…。
＃ゲーム終了
＊TH.talk.gameend.winner
：（８）フッ…。
＊TH.talk.gameend.loser
：（３）敵わない…。

＃==========================================================
＃ 以下は変更不要
＃==========================================================
＠OnPoker
（call,TH.res.（R3））

＠TH.res.hello
（TH.clear_variables）（call,TH.make_response）
＠TH.make_response
\![raiseother,（R1）,（R2）,（TH.Version）,（TH.GhostName）,（join（バイト値,1）,（バイト値,1）（A0））]

＠TH.res.action
（
	TH.make_action_array
）（
	set
	,_ret
	,（
		whenlist
		,（calc,（count,（TH.community）,（バイト値,1）））==
		,0
		,（call,TH.AI.PreFlop,（_action））
		,3-1
		,（call,TH.AI.Flop,（_action））
		,4-1
		,（call,TH.AI.Turn,（_action））
		,5-1
		,（call,TH.AI.River,（_action））
	）
）（
	call
	,TH.make_response
	,（_ret）
）（set,_action,）（set,_ret,）
＠TH.make_action_array
（loop,TH.make_action_array_loop,4,（Ｒの数）-1）
＠TH.make_action_array_loop
（
	when
	,（変数「_action」の存在）
	,（set,_action,（_action）（バイト値,1）（R（TH.make_action_array_loopカウンタ）））
	,（set,_action,（R（TH.make_action_array_loopカウンタ）））
）

＠OnPokerNotify
（call,TH.res.（R1））

＠TH.res.game_start
（when,（TH.is_joined）,（TH.talk.game_start））
＠TH.is_joined
（set,_r,0）（loop,TH.is_joined_loop,2,（Ｒの数）-1）（_r）（set,_r,）
＠TH.is_joined_loop
（
	when
	,（compare（バイト値,1）（R（TH.is_joined_loopカウンタ））（バイト値,1）（TH.GhostName））
	,（set,_r,1）
）

＠TH.res.round_start
（
	set,TH.blind,（R2）
）（
	set,TH.bet,0
）（
	set,TH.players,
）（
	TH.make_players_array
）（
	set,TH.round_players,（calc,（count,（TH.players）,（バイト値,2））+1）
）（
	set,TH.n_players,（TH.round_players）
）
＠TH.make_players_array
（loop,TH.make_players_array_loop,3,（Ｒの数）-1）
＠TH.make_players_array_loop
（
	when
	,（変数「TH.players」の存在）
	,（set,TH.players,（TH.players）（バイト値,2）（R（TH.make_players_array_loopカウンタ）））
	,（set,TH.players,（R（TH.make_players_array_loopカウンタ）））
）（
	nop
	,（
		split
		,（R（TH.make_players_array_loopカウンタ））
		,（バイト値,1）
	）
）（
	when
	,（compare（バイト値,1）（S0）（バイト値,1）（TH.GhostName））
	,（set,TH.stack,（S1））
）

＠TH.res.hand
（set,TH.hand,（R2）（バイト値,1）（R3））

＠TH.res.flip
（
	set,TH.pot,（R2）
）（
	set,TH.community,
）（
	TH.make_community_array
）（
	set,TH.current_bet,0
）
＠TH.make_community_array
（loop,TH.make_community_array_loop,3,（Ｒの数）-1）
＠TH.make_community_array_loop
（
	when
	,（変数「TH.community」の存在）
	,（set,TH.community,（TH.community）（バイト値,1）（R（TH.make_community_array_loopカウンタ）））
	,（set,TH.community,（R（TH.make_community_array_loopカウンタ）））
）

＠TH.res.blind_bet
（set,TH.bet,（R2））

＠TH.res.bet
（
	set,TH.total_bet,（R2）
）（
	set,TH.current_bet,（R3）
）（
	set,_player,（R4）
）（
	set,_action,（R5）
）（
	when
	,（compare（バイト値,1）（_action）（バイト値,1）fold）
	,（set,TH.n_players,（calc,（TH.n_players）-1））
）（
	when
	,（compare（バイト値,1）（_player）（バイト値,1）（TH.GhostName））
	,（call,TH.talk.action.（_action））
）（set,_player,）（set,_action,）

＠TH.res.show_down

＠TH.res.round_result
（
	set,_winner,（R2）
）（
	set,TH.players,
）（
	TH.make_players_array
）（
	when
	,（count,（_winner）,（TH.GhostName））
	,（TH.talk.round.winner）
）（
	when
	,（TH.stack）<=0 && !（変数「TH.save.gameover」の存在）
	,（TH.talk.round.dropout）（set,TH.save.gameover,1）
）（set,_winner,）

＠TH.res.game_result
（
	when
	,（compare（バイト値,1）（R2）（バイト値,1）（TH.GhostName））
	,（TH.talk.gameend.winner）
	,（TH.talk.gameend.loser）
）（TH.clear_variables）

＠TH.clear_variables
（set,TH.bet,）φ
（set,TH.blind,）φ
（set,TH.current_bet,）φ
（set,TH.hand,）φ
（set,TH.n_players,）φ
（set,TH.players,）φ
（set,TH.pot,）φ
（set,TH.round_players,）φ
（set,TH.save.gameover,）φ
（set,TH.stack,）φ
（set,TH.total_bet,）φ
（set,TH.AI.strength,）

＃==========================================================
＃ AI
＃==========================================================
＃とりあえずフロップを見に行く
＠TH.AI.PreFlop
（
	set,TH.AI.strength,（call,TH.calc_hand,（TH.hand））
）（
	when
	,（count,（A0）,check）
	,（set,_ret,check）
	,（
		when
		,（count,（A0）,call）&&（TH.current_bet）<=（TH.blind）*3
		,（set,_ret,call）
		,（
			when
			,（TH.current_bet）<=（TH.blind）*3||（TH.stack）<（TH.blind）*10
			,（set,_ret,allin）
			,（set,_ret,fold）
		）
	）
）（_ret）（set,_ret,）

＠TH.AI.Flop
（
	set,_strength,（call,TH.calc_hand,（TH.hand）（バイト値,1）（TH.community））
）（＃何か役が出来たらraise
	when
	,（_strength）>（TH.AI.strength）
	,（set,TH.AI.strength,（_strength））（
		when
		,（count,（A0）,bet）
		,（set,_ret,bet（バイト値,1）（calc,(（TH.pot）/10)*5））
		,（
			when
			,（count,（A0）,raise）
			,（set,_ret,raise（バイト値,1）（calc,(（TH.pot）/10)*5））
			,（set,_ret,allin）
		）
	）
	,（＃check出来るときはcheck
		when
		,（count,（A0）,check）
		,（set,_ret,check）
		,（set,_ret,fold）
	）
）（_ret）（set,_strength,）（set,_ret,）

＠TH.AI.Turn
（
	set,_strength,（call,TH.calc_hand,（TH.hand）（バイト値,1）（TH.community））
）（
	when
	,（_strength）>（TH.AI.strength）
	,（set,TH.AI.strength,（_strength））（
		when
		,（count,（A0）,bet）
		,（set,_ret,bet（バイト値,1）（calc,(（TH.pot）/10)*5））
		,（
			when
			,（count,（A0）,raise）
			,（set,_ret,raise（バイト値,1）（calc,(（TH.pot）/10)*5））
			,（set,_ret,allin）
		）
	）
	,（
		when
		,（count,（A0）,check）
		,（set,_ret,check）
		,（＃1-Pair以上の役が出来ていたらcall
			when
			,（TH.AI.strength）>1
			,（set,_ret,call）
			,（set,_ret,fold）
		）
	）
）（_ret）（set,_strength,）（set,_ret,）

＠TH.AI.River
（TH.AI.Turn）

＃==========================================================
＃ SAORIを使わず独自に強さ判定 フラッシュ/ストレートはスルー
＃==========================================================
＠TH.calc_hand
（
	set,_h,（erase,（erase,（erase,（erase,（A0）,S）,H）,D）,C）
）（
	set,_h,†（replace,（_h）,（バイト値,1）,††）†
）（set,_c,0）（loop,TH.calc_hand_loop,1,13）（TH.calc_hand_r）（set,_h,）（set,_c,）（set,_r,）
＠TH.calc_hand_loop
（set,_c,（_c）（count,（_h）,†（TH.calc_hand_loopカウンタ）†））
＠TH.calc_hand_r
（
	when
	,（count,（_c）,4）==1
	,（set,_r,（TH.Hand.FourOfAKind））
	,（
		when
		,（count,（_c）,3）==1&&（count,（_c）,2）==1
		,（set,_r,（TH.Hand.FullHouse））
		,（
			when
			,（count,（_c）,3）==1
			,（set,_r,（TH.Hand.ThreeOfAKind））
			,（
				when
				,（count,（_c）,2）==2
				,（set,_r,（TH.Hand.TwoPair））
				,（
					when
					,（count,（_c）,2）==1
					,（set,_r,（TH.Hand.OnePair））
					,（set,_r,（TH.Hand.HighCards））
				）
			）
		）
	）
）（_r）

＠TH.Hand.None
0
＠TH.Hand.HighCards
1
＠TH.Hand.OnePair
2
＠TH.Hand.TwoPair
3
＠TH.Hand.ThreeOfAKind
4
＠TH.Hand.Straight
5
＠TH.Hand.Flush
6
＠TH.Hand.FullHouse
7
＠TH.Hand.FourOfAKind
8
＠TH.Hand.StraightFlush
9
