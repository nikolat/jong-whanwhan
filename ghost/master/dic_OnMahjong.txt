＃==========================================================
＃ LICENSE: CC0 1.0 Universal
＃ http://creativecommons.org/publicdomain/zero/1.0/
＃==========================================================

＃==========================================================
＃ 設定
＃==========================================================
＃バージョン
＠MJ.Version
UKAJONG/0.2
＃返答時のイベント名
＠MJ.ResponseEventID
OnMahjongResponse
＃イベントログをだらだら見るモード
＠MJ.ShowAllLogMode
0

＃==========================================================
＃ ID: OnMahjong
＃ Reference0: バージョン(UKAJONG/0.2)
＃ Reference1: サーバコマンド(gamestart|gameend|...)
＃ Reference2以降: サーバコマンド追加情報
＃==========================================================
＊OnMahjong
＞MJ.イベントログ垂れ流し	（MJ.ShowAllLogMode）
＞MJ.Main	（compare,（R0）,（MJ.Version））

＃==========================================================
＃ イベントログ垂れ流し
＃==========================================================
＊MJ.イベントログ垂れ流し
＄スクリプトの一番頭	\C
：\b[2]\_q\n\nID: OnMahjong（loop,showRef,0,（Rの数）-1）
＞MJ.Main	（compare,（R0）,（MJ.Version））
＠showRef
\nReference（showRefカウンタ）: （R（showRefカウンタ））

＃==========================================================
＃ メイン処理
＃==========================================================
＊MJ.Main
＞MJ.（R1）

＃----------------------------------------------------------
＃ hello 接続確認
＃----------------------------------------------------------
＊MJ.hello
（call,MJ.SendResponse,（R1）,ump=（ump_version）,name=（FMO0name））

＠ump_version
?

＃----------------------------------------------------------
＃ gamestart ゲーム(半荘)開始
＃ Reference2: 席(東|南|西|北)
＃ Reference3: プレイヤー名1
＃ Reference4: プレイヤー名2
＃ Reference5: プレイヤー名3
＃ Reference6: プレイヤー名4
＃----------------------------------------------------------
＊MJ.gamestart
：（０）よろしく…。
＊MJ.gamestart
：（７）絶対負けない…。

＃----------------------------------------------------------
＃ gameend ゲーム終了
＃ Reference2: プレイヤー名1（バイト値,1）点数
＃ Reference3: プレイヤー名2（バイト値,1）点数
＃ Reference4: プレイヤー名3（バイト値,1）点数
＃ Reference5: プレイヤー名4（バイト値,1）点数
＃----------------------------------------------------------
＊MJ.gameend
：…。

＃----------------------------------------------------------
＃ kyokustart 一局が始まるときに送る
＃ Reference2: 場風(東|南|西|北)
＃ Reference3: 親(ex.プレイヤー名1)
＃ Reference4: 本場(ex.1)
＃ Reference5: 供託(ex.1000)
＃----------------------------------------------------------
＊MJ.kyokustart
：（０）

＃----------------------------------------------------------
＃ kyokuend 一局終了
＃----------------------------------------------------------
＊MJ.kyokuend
＞MJ.表情戻し	!（count,（Status）,talking）

＊MJ.表情戻し
：（０）

＃----------------------------------------------------------
＃ point プレイヤーの点数を通知する
＃ Reference2: プレイヤー名
＃ Reference3: (=|+|-) =は点数の直指定、+-は増減を意味する
＃ Reference4: 点数
＃----------------------------------------------------------
＊MJ.point
＞MJ.point自分	（compare,（R2）,（FMO0name））

＊MJ.point自分
＞MJ.point（MJ.状態）
＄MJ.状態	

＃流局では一々喋らない
＊MJ.point和了
＞MJ.point自分現点数	（compare,（R3）,=）
＄MJ.状態	
＞MJ.point自分プラス	（compare,（R3）,+）
＞MJ.point自分マイナス	（compare,（R3）,-）

＊MJ.point自分現点数

＊MJ.point自分プラス
：（choice,（５）,（８））…フフッ。

＊MJ.point自分マイナス
＞MJ.point自分マイナス大	8000<=（R4）
：（choice,（３）,（４））…。

＊MJ.point自分マイナス大
：（７）許さない…。

＃----------------------------------------------------------
＃ haipai 配牌を配る
＃ Reference2: プレイヤー名
＃ Reference3: 配牌(ex.1m2m3m4p5p6p7s8s9s1z5z6z7z)
＃----------------------------------------------------------
＊MJ.haipai

＃----------------------------------------------------------
＃ dora ドラ表示牌を送る
＃ Reference2: 牌(ex.7z)
＃----------------------------------------------------------
＊MJ.dora

＃----------------------------------------------------------
＃ open 手牌を公開する(チー、ポン、カン)
＃ Reference2: プレイヤー名
＃ Reference3: 牌(ex.1p2p3p)
＃----------------------------------------------------------
＊MJ.open

＃----------------------------------------------------------
＃ tsumo 自摸
＃ Reference2: プレイヤー名(自分)
＃ Reference3: 残り枚数
＃ Reference4: 牌(ex.7z)
＃----------------------------------------------------------
＊MJ.tsumo
＄MJ.自摸牌	（R4）
＞MJ.表情戻し	!（count,（Status）,talking）

＃----------------------------------------------------------
＃ sutehai 捨牌
＃ Reference2: プレイヤー名
＃ Reference3: 牌(ex.7z)
＃----------------------------------------------------------
＊MJ.sutehai
＞MJ.sutehai自分	（compare,（R2）,（FMO0name））

＊MJ.sutehai自分
＞MJ.副露後	!（変数「MJ.自摸牌」の存在）
＞MJ.ツモ切り	（compare,（R3）,（MJ.自摸牌））
＞MJ.手出し

＊MJ.副露後

＊MJ.ツモ切り
＄MJ.自摸牌	
＞MJ.ツモ切りポロリ	!（count,（Status）,talking） && !（乱数0～4）

＊MJ.手出し
＄MJ.自摸牌	
＞MJ.手出しポロリ	!（count,（Status）,talking） && !（乱数0～4）

＃ 他家（ユーザ）に悟られることは自分が不利になること。
＃ でもゴーストにはそれくらいの「可愛らしさ」があってもよい。
＊MJ.ツモ切りポロリ
：（choice,（３）,（４））…。
＊MJ.手出しポロリ
：（choice,（５）,（８））…。

＃----------------------------------------------------------
＃ sutehai? 捨牌を尋ねる
＃----------------------------------------------------------
＊MJ.sutehai?
＃コマンドを送らないことでサーバーに対応を委任する
（call,MJ.SendResponse,（R1）,）

＃----------------------------------------------------------
＃ naku? 牌を鳴くか尋ねる。クライアントが可能なコマンドも送る
＃ Reference2: (ron|kan|pon|chi)
＃ Reference3: 以降、Reference2同様
＃----------------------------------------------------------
＊MJ.naku?
＃コマンドを送らないことでサーバーに対応を委任する
（call,MJ.SendResponse,（R1）,）
＃（call,MJ.SendResponse,（R1）,（if,（MJ.can_ron）,ron,no））

＠MJ.can_ron
（set,MJ.tmp_can_ron,0）（loop,MJ.search_ron,2,（Rの数）-1）（MJ.tmp_can_ron）（set,MJ.tmp_can_ron,）
＠MJ.search_ron
（
	set
	,MJ.tmp_can_ron
	,（
		calc
		,（MJ.tmp_can_ron）+（equal,（R（MJ.search_ronカウンタ））,ron）
	）
）

＃----------------------------------------------------------
＃ tenpai? テンパイを宣言するか尋ねる
＃----------------------------------------------------------
＊MJ.tenpai?
＃コマンドを送らないことでサーバーに対応を委任する
（call,MJ.SendResponse,（R1）,）
＃（call,MJ.SendResponse,（R1）,yes）

＃----------------------------------------------------------
＃ say 発声
＃ Reference2: プレイヤー名
＃ Reference3: (chi|pon|kan|ron|tsumo|richi|tenpai|noten)
＃----------------------------------------------------------
＊MJ.say
＞MJ.say自分	（compare,（R2）,（FMO0name））
＞MJ.say他人（R3）

＊MJ.say自分
＞MJ.say自分（R3）

＊MJ.say自分chi
：チー（call,MJ.ExecAqtk,ち'ー）
＊MJ.say自分pon
：ポン（call,MJ.ExecAqtk,ぽ'ん）
＊MJ.say自分kan
：カン（call,MJ.ExecAqtk,か'ん）
＊MJ.say自分ron
：（６）ロン（call,MJ.ExecAqtk,ろ'ん）
＊MJ.say自分tsumo
：（６）ツモ（call,MJ.ExecAqtk,つ'も）
＊MJ.say自分richi
：（６）リーチ（call,MJ.ExecAqtk,り'ーち）
＊MJ.say自分tenpai
：（６）テンパイ（call,MJ.ExecAqtk,て'んぱい）
＊MJ.say自分noten
：（６）ノーテン（call,MJ.ExecAqtk,の'ーてん）

＊MJ.say他人richi
：\w9\w9（choice,（２）,（３）,（７））！

＠MJ.ExecAqtk
（
	（
		if
		,（MJ.IsSoundEnabled）
		,aqtk、PLAYASYNC、（A0）
		,nop、
	）
）

＃----------------------------------------------------------
＃ agari あがり
＃ Reference2: プレイヤー名
＃ Reference3: 符
＃ Reference4: 役,ハン数
＃ Reference5: 以降、Reference4同様
＃----------------------------------------------------------
＊MJ.agari
＄MJ.状態	和了

＃----------------------------------------------------------
＃ ryukyoku 流局
＃----------------------------------------------------------
＊MJ.ryukyoku
＄MJ.状態	流局

＃==========================================================
＃ utility
＃==========================================================
＠MJ.SendResponse
（
	（
		if
		,（MJ.IsSSTP）
		,MJ.SendResponseSSTP
		,MJ.SendResponseRaiseother
	）
）

＠MJ.SendResponseSSTP
（set,返信ヘッダ「X-SSTP-PassThru-ID」,（MJ.ResponseEventID））φ
（set,返信ヘッダ「X-SSTP-PassThru-Reference0」,（MJ.Version））φ
（loop,MJ.SendResponseSSTPLoop,0,（Ａの数）-1）
＠MJ.SendResponseSSTPLoop
（set,返信ヘッダ「X-SSTP-PassThru-Reference（calc,（MJ.SendResponseSSTPLoopカウンタ）+1）」,（Ａ（MJ.SendResponseSSTPLoopカウンタ）））

＠MJ.SendResponseRaiseother
\![raiseother,（Sender）,（MJ.ResponseEventID）,（MJ.Version）（loop,MJ.SendResponseRaiseotherLoop,0,（Ａの数）-1）]
＠MJ.SendResponseRaiseotherLoop
,（Ａ（MJ.SendResponseRaiseotherLoopカウンタ））

＠MJ.IsSSTP
（nop,（split（バイト値,1）（SenderType）（バイト値,1）,））φ
（set,MJ.R,0）（loop,MJ.IsSSTPLoop,0,（Ｓの数）-1）（MJ.R）（set,MJ.R,）
＠MJ.IsSSTPLoop
（
	（
		if
		,（Ｓ（MJ.IsSSTPLoopカウンタ））==sstp
		,set（バイト値,1）MJ.R（バイト値,1）1
		,nop（バイト値,1）
	）
）

＃==========================================================
＃ Sound
＃==========================================================
＠MJ.SoundDefault
1
＠MJ.IsSoundEnabled
（
	if
	,（変数「MJ.Sound」の存在）
	,（MJ.Sound）
	,（MJ.SoundDefault）
）
＊mが押された
（
	（
		if
		,（変数「MJ.Sound」の存在）
		,set、MJ.Sound、（calc,!（MJ.Sound））
		,set、MJ.Sound、（calc,!（MJ.SoundDefault））
	）
）\0\_qSound: （if,（MJ.Sound）,ON,OFF）\_q
